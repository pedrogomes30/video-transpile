#!/usr/bin/env python3
"""
Script automatizado para build do Video Transcriber.
"""

import os
import sys
import platform
import subprocess
import shutil
from pathlib import Path
from datetime import datetime

def run_command(command, description):
    """Executa um comando e exibe o resultado."""
    print(f"‚ö° {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro em {description}:")
        print(f"   C√≥digo de retorno: {e.returncode}")
        print(f"   Sa√≠da: {e.stdout}")
        print(f"   Erro: {e.stderr}")
        return False

def check_dependencies():
    """Verifica se todas as depend√™ncias est√£o instaladas."""
    print("üîç Verificando depend√™ncias...")
    
    required_packages = ["pyinstaller", "whisper", "opencv-python"]
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace("-", "_"))
            print(f"‚úÖ {package} encontrado")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package} n√£o encontrado")
    
    if missing_packages:
        print(f"\nüì¶ Instalando pacotes faltantes: {', '.join(missing_packages)}")
        install_cmd = f"{sys.executable} -m pip install {' '.join(missing_packages)}"
        return run_command(install_cmd, "Instala√ß√£o de depend√™ncias")
    
    return True

def prepare_ffmpeg():
    """Prepara o FFmpeg para o build."""
    print("üé¨ Preparando FFmpeg...")
    
    system = platform.system()
    
    if system == "Windows":
        # Verifica se ffmpeg.exe existe no diret√≥rio atual
        if not os.path.exists("ffmpeg.exe"):
            print("‚ö†Ô∏è ffmpeg.exe n√£o encontrado. Executando setup autom√°tico...")
            if not run_command(f"{sys.executable} setup_ffmpeg.py", "Setup do FFmpeg"):
                return False
        else:
            print("‚úÖ ffmpeg.exe encontrado!")
    
    else:
        # Linux/macOS - verifica se est√° no PATH
        try:
            subprocess.run(["ffmpeg", "-version"], capture_output=True, check=True)
            print("‚úÖ FFmpeg encontrado no sistema!")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ö†Ô∏è FFmpeg n√£o encontrado. Executando setup autom√°tico...")
            if not run_command(f"{sys.executable} setup_ffmpeg.py", "Setup do FFmpeg"):
                return False
    
    return True

def clean_build():
    """Limpa arquivos de build anteriores."""
    print("üßπ Limpando builds anteriores...")
    
    dirs_to_clean = ["build", "dist", "__pycache__"]
    files_to_clean = ["app.spec", "*.pyc"]
    
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"üóëÔ∏è Removido: {dir_name}/")
    
    # Remove arquivos espec√≠ficos
    for file_pattern in files_to_clean:
        if "*" in file_pattern:
            import glob
            for file in glob.glob(file_pattern):
                os.remove(file)
                print(f"üóëÔ∏è Removido: {file}")
        else:
            if os.path.exists(file_pattern):
                os.remove(file_pattern)
                print(f"üóëÔ∏è Removido: {file_pattern}")
    
    # Remove __pycache__ recursivamente
    for root, dirs, files in os.walk("."):
        for dir_name in dirs[:]:
            if dir_name == "__pycache__":
                shutil.rmtree(os.path.join(root, dir_name))
                dirs.remove(dir_name)
                print(f"üóëÔ∏è Removido: {os.path.join(root, dir_name)}/")

    print("‚úÖ Limpeza conclu√≠da!")

def get_build_config():
    """Obt√©m configura√ß√µes de build personalizadas."""
    config = {
        "app_name": "VideoTranscriber",
        "console_mode": False,
        "debug_mode": False,
        "icon_path": None,
        "upx_compression": True,
        "exclude_modules": [
            'matplotlib',
            'pandas', 
            'numpy.distutils',
            'scipy',
            'pytest',
            'setuptools',
        ]
    }
    
    # Verifica se existe arquivo de configura√ß√£o personalizada
    if os.path.exists("build_config.ini"):
        try:
            import configparser
            parser = configparser.ConfigParser()
            parser.read("build_config.ini")
            
            if "build" in parser:
                build_section = parser["build"]
                config["app_name"] = build_section.get("app_name", config["app_name"])
                config["console_mode"] = build_section.getboolean("console_mode", config["console_mode"])
                config["debug_mode"] = build_section.getboolean("debug_mode", config["debug_mode"])
                config["icon_path"] = build_section.get("icon_path", config["icon_path"])
                config["upx_compression"] = build_section.getboolean("upx_compression", config["upx_compression"])
                
            print("‚úÖ Configura√ß√µes personalizadas carregadas!")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao carregar configura√ß√µes personalizadas: {e}")
            print("   Usando configura√ß√µes padr√£o...")
    
    return config

def generate_spec_file():
    """Gera o arquivo app.spec dinamicamente."""
    print("üìù Gerando arquivo app.spec...")
    
    # Obt√©m configura√ß√µes
    config = get_build_config()
    system = platform.system()
    
    # Configura√ß√µes baseadas no sistema operacional
    if system == "Windows":
        ffmpeg_binary = "('ffmpeg.exe', '.')"
        exe_extension = ".exe"
    else:
        ffmpeg_binary = "('ffmpeg', '.')"
        exe_extension = ""
    
    exe_name = config["app_name"] + exe_extension
    console_mode = "True" if config["console_mode"] else "False"
    debug_mode = "True" if config["debug_mode"] else "False"
    upx_enabled = "True" if config["upx_compression"] else "False"
    
    # √çcone
    icon_line = f"icon='{config['icon_path']}'," if config["icon_path"] else "icon=None,"
    
    # Exclus√µes
    excludes_list = str(config["exclude_modules"]).replace("'", '"')
    
    # Encontra o caminho dos assets do Whisper
    whisper_assets_path = "('whisper/assets', 'whisper/assets')"
    try:
        import whisper
        whisper_dir = os.path.dirname(whisper.__file__)
        assets_dir = os.path.join(whisper_dir, "assets")
        if os.path.exists(assets_dir):
            whisper_assets_path = f"('{assets_dir}', 'whisper/assets')"
        print(f"‚úÖ Assets do Whisper encontrados: {assets_dir}")
    except ImportError:
        print("‚ö†Ô∏è Whisper n√£o encontrado, usando caminho padr√£o")
    
    spec_content = f'''# -*- mode: python ; coding: utf-8 -*-
# Arquivo gerado automaticamente pelo build.py
# Data de gera√ß√£o: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

import os
import platform

a = Analysis(
    ['app.py'],
    pathex=[],
    binaries=[
        {ffmpeg_binary},  # FFmpeg execut√°vel
    ],
    datas=[
        {whisper_assets_path},  # Assets do Whisper
    ],
    hiddenimports=[
        'whisper',
        'whisper.model',
        'whisper.audio', 
        'whisper.decoding',
        'whisper.tokenizer',
        'ffmpeg',
        'subprocess',
        'platform',
        'pathlib',
        'glob',
        'logging',
        'gc',
        'tkinter',
        'tkinter.filedialog',
        'tkinter.messagebox',
        'cv2',
        'moviepy',
        'transformers',
        'requests',
        'configparser',
    ],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes={excludes_list},
    noarchive=False,
    optimize=0,
)

pyz = PYZ(a.pure)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.datas,
    [],
    name='{exe_name}',
    debug={debug_mode},
    bootloader_ignore_signals=False,
    strip=False,
    upx={upx_enabled},
    upx_exclude=[],
    runtime_tmpdir=None,
    console={console_mode},  # Console para debug ou interface gr√°fica
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    {icon_line}
)
'''
    
    # Escreve o arquivo spec
    with open("app.spec", "w", encoding="utf-8") as f:
        f.write(spec_content)
    
    print(f"‚úÖ Arquivo app.spec gerado: {exe_name}")
    print(f"   Console: {'Habilitado' if config['console_mode'] else 'Desabilitado'}")
    print(f"   Debug: {'Habilitado' if config['debug_mode'] else 'Desabilitado'}")
    print(f"   UPX: {'Habilitado' if config['upx_compression'] else 'Desabilitado'}")
    
    return True

def create_alternative_build():
    """Cria build alternativo se PyInstaller n√£o funcionar."""
    print("üîÑ Criando build alternativo...")
    
    # Comando alternativo mais simples
    system = platform.system()
    if system == "Windows":
        cmd = 'pyinstaller --onefile --windowed --name="VideoTranscriber" --add-data="whisper/assets;whisper/assets" app.py'
    else:
        cmd = 'pyinstaller --onefile --windowed --name="VideoTranscriber" --add-data="whisper/assets:whisper/assets" app.py'
    
    return run_command(cmd, "Build alternativo")

def build_executable():
    """Constr√≥i o execut√°vel usando PyInstaller."""
    print("üèóÔ∏è Construindo execut√°vel...")
    
    # Gera o arquivo spec primeiro
    if not generate_spec_file():
        print("‚ö†Ô∏è Falha ao gerar spec, tentando build alternativo...")
        return create_alternative_build()
    
    # Comando de build
    build_cmd = "pyinstaller app.spec"
    
    if not run_command(build_cmd, "Build do execut√°vel"):
        print("‚ö†Ô∏è Build com spec falhou, tentando build alternativo...")
        return create_alternative_build()
    
    # Verifica se o execut√°vel foi criado
    system = platform.system()
    if system == "Windows":
        exe_path = "dist/VideoTranscriber.exe"
    else:
        exe_path = "dist/VideoTranscriber"
    
    if os.path.exists(exe_path):
        print(f"‚úÖ Execut√°vel criado com sucesso: {exe_path}")
        
        # Exibe informa√ß√µes do arquivo
        size_mb = os.path.getsize(exe_path) / (1024 * 1024)
        print(f"üìè Tamanho: {size_mb:.1f} MB")
        
        return True
    else:
        print(f"‚ùå Execut√°vel n√£o encontrado em: {exe_path}")
        return False

def test_executable():
    """Testa o execut√°vel criado."""
    print("üß™ Testando execut√°vel...")
    
    system = platform.system()
    if system == "Windows":
        exe_path = "dist/VideoTranscriber.exe"
    else:
        exe_path = "dist/VideoTranscriber"
    
    if not os.path.exists(exe_path):
        print(f"‚ùå Execut√°vel n√£o encontrado: {exe_path}")
        return False
    
    # Teste b√°sico (apenas verifica se inicia)
    try:
        print("   Iniciando teste do execut√°vel...")
        # Processo em background para n√£o travar
        process = subprocess.Popen([exe_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # Aguarda um pouco e termina
        import time
        time.sleep(2)
        process.terminate()
        
        print("‚úÖ Execut√°vel iniciou corretamente!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar execut√°vel: {e}")
        return False

def create_installer_info():
    """Cria informa√ß√µes para instala√ß√£o."""
    readme_build = """
# Video Transcriber - Execut√°vel

## üì¶ Arquivo gerado
- **Execut√°vel**: `dist/VideoTranscriber.exe` (Windows) ou `dist/VideoTranscriber` (Linux/macOS)

## üöÄ Como usar o execut√°vel
1. Copie o arquivo execut√°vel para onde desejar
2. Execute o arquivo diretamente (duplo clique no Windows)
3. A interface gr√°fica ser√° aberta automaticamente

## üìã Requisitos do sistema
- Windows 10+ / Linux / macOS
- Pelo menos 4GB de RAM
- Conex√£o com internet (primeira execu√ß√£o para download do modelo Whisper)

## üîß Solu√ß√£o de problemas
- **Windows**: Se o antiv√≠rus bloquear, adicione √† lista de exce√ß√µes
- **Linux/macOS**: D√™ permiss√£o de execu√ß√£o: `chmod +x VideoTranscriber`

## üìÅ Arquivos de sa√≠da
Os arquivos transcritos ser√£o salvos em:
- `output/[nome-do-video]/transcription.txt`
"""
    
    with open("dist/LEIA-ME.txt", "w", encoding="utf-8") as f:
        f.write(readme_build)
    
    print("üìÑ Arquivo LEIA-ME.txt criado em dist/")

def main():
    """Fun√ß√£o principal do build."""
    print("üé¨ Video Transcriber - Build Autom√°tico")
    print("=" * 50)
    
    # Etapas do build
    steps = [
        ("Verifica√ß√£o de depend√™ncias", check_dependencies),
        ("Prepara√ß√£o do FFmpeg", prepare_ffmpeg),
        ("Limpeza de builds anteriores", clean_build),
        ("Constru√ß√£o do execut√°vel", build_executable),
        ("Teste do execut√°vel", test_executable),
        ("Cria√ß√£o de informa√ß√µes", create_installer_info),
    ]
    
    for step_name, step_function in steps:
        print(f"\nüìã Etapa: {step_name}")
        print("-" * 30)
        
        if not step_function():
            print(f"\n‚ùå FALHA na etapa: {step_name}")
            print("üõë Build interrompido!")
            return False
    
    print("\n" + "=" * 50)
    print("üéâ BUILD CONCLU√çDO COM SUCESSO!")
    print("üì¶ Execut√°vel dispon√≠vel na pasta 'dist/'")
    print("=" * 50)
    
    return True

if __name__ == "__main__":
    try:
        if main():
            sys.exit(0)
        else:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Build cancelado pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico durante o build: {e}")
        sys.exit(1)
